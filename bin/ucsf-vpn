#!/usr/bin/env bash
### Connect and Disconnect to the UCSF VPN
###
### Usage:
###  ucsf-vpn (start|restart|stop|toggle|status|details) [options]
###
### Commands:
###  start-gui      Open the Pulse Secure GUI
###  start          Connects to UCSF VPN
###  stop           Disconnects from UCSF VPN
###  restart        Disconnects and reconnects to UCSF VPN
###  toggle         Connects to or disconnects from UCSF VPN
###  status         Displays UCSF VPN connection status
###  details        Displays connection details
###
### Options:
###  --user         UCSF VPN username
###  --pwd          UCSF VPN password
###  --server       VPN server (defaults to remote.ucsf.edu)
###  --skip         If already fulfilled, skip command
###  --force        Force running the command
###  --verbose      Verbose output
###  --help         This help
###  --version      Display version
###
### Any other options are passed to Pulse Secure as is.
###
### Example:
###  ucsf-vpn start --user=alice --pwd secrets
###  ucsf-vpn stop
###
### User credentials:
### The default values for --user and --pwd can be specified in
### ~/.ucsfvpnrc using one <key>=<value> pair per line. For example:
###
###   user=alice
###   pwd=secret
###
### For security, the ~/.ucsfvpnrc file should be readable only by
### the user / owner of the file.  If not, then 'ucsf-vpn start' will
### set its permission accordingly (by calling chmod go-rwx ~/.ucsfvpnrc).
###
### Requirements:
### * Junos Pulse Secure client (>= 5.3) (installed: {{pulsesvc_version}})
### * Ports 4242 (UDP) and 443 (TCP)
### * No need for sudo rights to run :)
###
### Troubleshooting:
### * Verify your username and password at https://remote.ucsf.edu/.
### * Make sure ports 4242 & 443 are not used by other processes
###
### See also:
### * https://remote.ucsf.edu/
### * https://software.ucsf.edu/content/vpn-virtual-private-network
###
### Version: 1.9.0-9000
### Copyright: Henrik Bengtsson (2016-2017)
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]
### Source: https://github.com/HenrikBengtsson/ucsf-vpn
call="$0 $*"

export PULSEDIR=/usr/local/pulse
export PATH="${PULSEDIR}:${PATH}"
export LD_LIBRARY_PATH="${PULSEDIR}:${LD_LIBRARY_PATH}"
export PUBLIC_INFO=

function mecho() { echo "$@" 1>&2; }
function mdebug() {
    if [[ $debug == TRUE ]]; then
        mecho "[DEBUG] $@";
    fi
}
function vecho() {
    if [[ $verbose == TRUE ]]; then
        echo "$@";
    fi
}

function version() {
    grep -E "^###[ ]*Version:[ ]*" $0 | sed 's/###[ ]*Version:[ ]*//g'
}

function pulsesvc_version() {
    res=$(pulsesvc --version 2> /dev/null)
    if [[ $? -ne 0 ]]; then
	echo "<PLEASE INSTALL>"
    else
        printf '%s\n' "${res[@]}" | grep -F "Release Version" | sed -E 's/.*:[ ]+//'
    fi
}

function help() {
    local res=$(grep "^###" $0 | grep -vE '^(####|### whatis: )' | cut -b 5- | sed "s/{{pulsesvc_version}}/$(pulsesvc_version)/")
    if [[ ${UCSF_TOOLS} == true ]]; then
        res=$(printf '%s\n' "${res[@]}" | sed 's/ucsf-vpn/ucsf vpn/')
    fi
    printf '%s\n' "${res[@]}"
}

function connection_details() {
    mdebug "connection_details($*)"
    if [[ -z ${PUBLIC_INFO} || "$1" == "--force" ]]; then
      mdebug "Querying https://ipinfo.io/ip for public IP:"
      export PUBLIC_INFO=$(curl --silent https://ipinfo.io/json)
    fi
    mdebug "Public connection information: $PUBLIC_INFO"
    if [[ -z ${PUBLIC_INFO} ]]; then
        mdebug "ERROR: Failed to infer public IP information"
	exit 1
    fi
    echo "$PUBLIC_INFO"
}

function public_ip() {
    mdebug "public_ip($*)"
    if [[ $1 == "" ]]; then
        connection_details | grep -F "ip" | sed -E 's/[ ",]//g' | cut -d : -f 2
    else
        echo $1
    fi
}

function public_hostname() {
    mdebug "public_hostname($*)"
    connection_details | grep -F "hostname" | sed -E 's/[ ",]//g' | cut -d : -f 2
}

function is_online() {
    mdebug "is_online()"
    ping -c 1 -W 1 8.8.8.8 > /dev/null
    if [[ $? == 0 ]]; then
        echo TRUE
    else
        echo FALSE
    fi
}

function is_running() {
    ps -C pulsesvc > /dev/null
    if [[ $? == 0 ]]; then
        echo TRUE
    else
        echo FALSE
    fi
}

function is_connected() {
    mdebug "is_connected($*)"
    ## NOTE: It appears that field 'hostname' is not always returned, e.g. when
    ## calling it multiple times in a row some calls done report that field.
    ## Because of this, we test the status on the field 'org' instead.
    connection_details | grep -q -E "org.*[:].*AS5653 University of California San Francisco"
    if [[ $? == 0 ]]; then
        echo TRUE
    else
        echo FALSE
    fi
}
function status() {
    mdebug "status($*)"
    if [[ $online == FALSE ]]; then
      echo "No internet connection"
      exit 1
    fi
    connected=$1
    ip=$2
    if [[ $ip == "" ]]; then
      vecho "- Retrieving public IP"
      ip=$(public_ip $1)
      vecho "  => $ip"
      mdebug ip=$ip
    fi
    if [[ $connected == "" ]]; then
      vecho "- Testing if IP $ip is a registered UCSF IP number"
      connected=$(is_connected $ip)
      vecho "  => $connected"
      mdebug ip=$ip
      mdebug connected=$connected
    fi
    if [[ $connected == TRUE ]]; then
        echo "Connected to the UCSF network [$(public_hostname) ($(public_ip))]"
    else
        echo "Not connected to the UCSF network [$(public_hostname) ($(public_ip))]"
    fi
}

function start_gui() {
    if [[ $online == FALSE ]]; then
      echo "ERROR: $(status $connected $ip)"
      exit 1
    elif [[ $force == FALSE || $skip == TRUE ]]; then
      ip=$(public_ip)
      connected=$(is_connected $ip)	
      if [[ $connected == TRUE ]]; then
          if [[ $skip == TRUE ]]; then
              echo "SKIPPING: $(status $connected $ip)"
              exit 0
	  else
              echo "ERROR: $(status $connected $ip)"
              exit 1
	  fi
      fi
    fi

    if [[ $debug == TRUE ]]; then
        mdebug "call: $call"
        mdebug "call: pulseUi"
    fi
    
    if [[ $dryrun == TRUE ]]; then
        exit 0
    fi
    
    pulseUi &
}

function start() {
    if [[ $online == FALSE ]]; then
      echo "ERROR: $(status $connected $ip)"
      exit 1
    elif [[ $force == FALSE || $skip == TRUE ]]; then
      ip=$(public_ip)
      connected=$(is_connected $ip)	
      if [[ $connected == TRUE ]]; then
          if [[ $skip == TRUE ]]; then
              echo "SKIPPING: $(status $connected $ip)"
              exit 0
	  else
              echo "ERROR: $(status $connected $ip)"
              exit 1
	  fi
      fi
    fi

    ## Load user credentials from file?
    if [[ -f ~/.ucsfvpnrc ]]; then
        ## Force file to be accessible only by user
        chmod go-rwx ~/.ucsfvpnrc
        source ~/.ucsfvpnrc
    fi

    ## Pulse Secure options
    opts="$extras"
    opts="$opts -h ${server}"
    realm="Single-Factor Pulse Clients"
    
    if [[ -n $user ]]; then
        opts="-u $user $opts"
    fi
    
#    if [[ -n $pwd ]]; then
#        opts="-p $pwd $opts"
#    fi
    
    if [[ ! $verbose == TRUE ]]; then
        opts="-log-level 5 $opts"
    fi

    if [[ $debug == TRUE ]]; then
        mdebug "call: $call"
        mdebug "user: $user"
        if [[ -n $pwd ]]; then
            mdebug "pwd: <hidden>"
        else
            mdebug "pwd: <not specified>"
        fi
        mdebug "opts: $opts"
        mdebug "call: pulsesvc $opts -r \"${realm}\""
    fi
    
    if [[ $dryrun == TRUE ]]; then
        exit 0
    fi
    
    if [[ -n $pwd ]]; then
        echo "$pwd" | pulsesvc $opts -r "${realm}" | grep -viF password &
    else
        pulsesvc $opts -r "${realm}" &
    fi
}

function stop() {
    if [[ $online == FALSE ]]; then
      echo "WARNING: $(status $connected $ip)"
    elif [[ $force == FALSE || $skip == TRUE ]]; then
      ip=$(public_ip)
      connected=$(is_connected $ip)
      if [[ $connected == FALSE ]]; then
          if [[ $skip == TRUE ]]; then
              echo "SKIPPING: $(status $connected $ip)"
              exit 0
          else
              echo "ERROR: $(status $connected $ip)"
              exit 1
          fi
      fi
      mdebug "Public IP (before): $ip"
    fi

    ## "Kill all running ncsvc services"
    pulsesvc -Kill
    echo "RESULT: Killed local VPN process"
}

function result() {
    ip=$(public_ip)
    connected=$(is_connected $ip)	
    echo "RESULT: $(status $connected $ip)"
}

## Actions
action=help

## Status
online=TRUE

## Options
server=remote.ucsf.edu
force=FALSE
skip=FALSE
debug=FALSE
verbose=FALSE
dryrun=FALSE
authgroup="Single-Factor Pulse Clients"
extras=

## User credentials
user=
pwd=

# Parse command-line options
while [[ $# > 0 ]]; do
    opt=$1
    if test "$1" == "--help"; then
        action=help
    elif test "$1" == "--version"; then
        action=version
    elif test "$1" == "start-gui"; then
        action=start-gui
    elif test "$1" == "start"; then
        action=start
    elif test "$1" == "status"; then
        action=status
    elif test "$1" == "details"; then
        action=details
    elif test "$1" == "stop"; then
        action=stop
    elif test "$1" == "restart"; then
        action=restart
	force=TRUE
    elif test "$1" == "toggle"; then
        action=toggle
	force=TRUE
    elif test "$1" == "--debug"; then
        debug=TRUE
    elif test "$1" == "--verbose"; then
        verbose=TRUE
    elif test "$1" == "--force"; then
        force=TRUE 
    elif test "$1" == "--skip"; then
        skip=TRUE
    elif test "$1" == "--dry-run"; then
        dryrun=TRUE
    elif test "$1" == "--server"; then
        shift
        server=$1
    elif test "$1" == "--user"; then
        shift
        user=$1
    elif test "$1" == "--pwd"; then
        shift
        pwd=$1
    else
        extras="$extras $1"
    fi
    shift
done

if [[ $debug == TRUE ]]; then
    mdebug "call: $call"
    mdebug "action: $action"
    mdebug "VPN server: $server"
    mdebug "verbose: $verbose"
    mdebug "force: $force"
    mdebug "skip: $skip"
    mdebug "dryrun: $dryrun"
    mdebug "extras: $extras"
fi

if [[ $action == "version" ]]; then
    version
    exit 0
elif [[ $action == "help" ]]; then
    help 
    exit 0
fi

## Check internet connection
online=$(is_online)
mdebug "online: $online"

if [[ $action == "status" ]]; then
    status
    exit $?
elif [[ $action == "details" ]]; then
    connection_details
    exit $?
elif [[ $action == "start-gui" ]]; then
    start_gui
    res=$?
    exit $res
elif [[ $action == "start" ]]; then
    start
    res=$?
    sleep 4
    online=$(is_online)
    result
    exit $res
elif [[ $action == "stop" ]]; then
    stop
    res=$?
    sleep 1
    online=$(is_online)
    result
    exit $res
elif [[ $action == "restart" ]]; then
    stop
    sleep 1
    online=$(is_online)
    start
    sleep 4
    res=$?
    online=$(is_online)
    result
    exit $res
elif [[ $action == "toggle" ]]; then
    connected=$(is_connected $ip)
    mdebug "connected: $connected"
    if [[ $connected == FALSE ]]; then
      start
      sleep 4
      res=$?
    else
      stop
      sleep 1
      res=$?
    fi
    online=$(is_online)
    result
    exit $res
fi
